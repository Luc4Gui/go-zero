# .github/workflows/performance_validation.yml

name: 'Go-Zero: Performance Validation'

# 1. TRIGGER: 允许通过 GitHub API 或手动触发
# 你的自动化脚本将调用 API 来启动这个 workflow
on:
  workflow_dispatch:
    inputs:
      target_sha:
        description: 'The optimization commit SHA to be tested'
        required: true
      parent_sha:
        description: 'The parent commit SHA for baseline comparison'
        required: true

jobs:
  # JOB 1: 运行基准测试
  # 这个 job 使用 matrix 策略，会并行（或串行）运行两次：
  # 一次用于 parent commit，一次用于 target commit。
  run-benchmarks:
    runs-on: ubuntu-latest
    strategy:
      # fail-fast: false 确保即使一个 commit 的测试失败，另一个也会继续运行
      fail-fast: false
      matrix:
        commit_type: [ 'parent', 'target' ]
        
    steps:
      # 步骤 1.1: 根据 matrix 类型检出对应的 commit 代码
      - name: 'Checkout Code for ${{ matrix.commit_type }}'
        uses: actions/checkout@v4
        with:
          # 使用三元表达式来动态选择 SHA
          ref: ${{ matrix.commit_type == 'target' && github.event.inputs.target_sha || github.event.inputs.parent_sha }}

      # 步骤 1.2: 设置 Go 环境，版本与 go-zero 仓库保持一致
      - name: 'Set up Go'
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod' # 自动从 go.mod 读取版本，非常可靠
          cache: true # 启用 Go 模块和构建缓存，加速运行

      # 步骤 1.3: 运行 go-zero 的全套基准测试
      # -bench=. 匹配所有基准测试
      # -benchmem 输出内存分配统计
      # -count=5 运行 5 次以获得更稳定的统计结果，这是 benchstat 的最佳实践
      # ./... 表示测试当前目录下的所有包
      - name: 'Run Go Benchmark for ${{ matrix.commit_type }}'
        id: run_benchmark
        run: |
          echo "Running benchmark for commit ${{ github.sha }}"
          go test -bench=. -benchmem -count=5 ./... | tee benchmark_result_${{ matrix.commit_type }}.txt

      # 步骤 1.4: 将测试结果文件作为 "Artifact" 上传
      # Artifact 是 job 之间传递文件的标准方式
      - name: 'Upload Benchmark Result Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-result-${{ matrix.commit_type }}
          path: benchmark_result_${{ matrix.commit_type }}.txt

  # JOB 2: 分析和比较结果
  # 这个 job 依赖于上一个 job 的两次运行都完成
  analyze-and-compare:
    runs-on: ubuntu-latest
    needs: run-benchmarks # 确保在 run-benchmarks job 完成后才开始

    steps:
      # 步骤 2.1: 下载 parent commit 的测试结果
      - name: 'Download Parent Benchmark Result'
        uses: actions/download-artifact@v4
        with:
          name: benchmark-result-parent

      # 步骤 2.2: 下载 target commit 的测试结果
      - name: 'Download Target Benchmark Result'
        uses: actions/download-artifact@v4
        with:
          name: benchmark-result-target

      # 步骤 2.3: 安装 Go 官方的 benchstat 工具
      - name: 'Install benchstat'
        run: go install golang.org/x/perf/cmd/benchstat@latest

      # 步骤 2.4: 使用 benchstat 进行专业比较
      # benchstat 会自动计算性能变化百分比和统计显著性
      # old: parent_result.txt, new: target_result.txt
      - name: 'Compare Benchmarks with benchstat'
        id: comparison
        run: |
          echo "### 벤치마크 비교 결과" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          # 将 benchstat 的输出同时打印到日志和 Job Summary 中
          ~/go/bin/benchstat benchmark_result_parent.txt benchmark_result_target.txt | tee comparison_output.txt
          echo '```' >> $GITHUB_STEP_SUMMARY

      # 步骤 2.5: 将最终的对比报告也作为 Artifact 上传，方便归档
      - name: 'Upload Comparison Report Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: comparison-report
          path: comparison_output.txt

